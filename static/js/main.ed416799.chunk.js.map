{"version":3,"sources":["getColors.js","App.js","reportWebVitals.js","index.js"],"names":["colors","Object","values","App","enqueueSnackbar","useSnackbar","useState","undefined","mousePosition","setMousePosition","isEditing","setIsEditing","editOpened","setEditOpened","editName","setEditName","handlingPoint","setHandlingPoint","paths","setPaths","selectedIndex","setSelectedIndex","createPath","name","points","counter","length","reduce","p1","p2","roundCoord","coord","Math","round","toFixed","getPathClickHandler","index","handleEditDialogClose","saveTextData","text","filename","element","document","createElement","textFile","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","removeChild","useEffect","savedPaths","JSON","parse","localStorage","getItem","className","center","lat","lng","level","onClick","_target","event","point","latLng","getLat","getLng","newPaths","push","unshift","console","log","onRightClick","_event","pop","shift","onMouseMove","position","zIndex","Paper","Typography","variant","map","path","strokeWeight","strokeColor","strokeOpacity","strokeStyle","style","border","Button","nameSet","Set","has","splice","backgroundColor","color","Tooltip","title","IconButton","Collapse","in","FormControl","component","FormLabel","RadioGroup","row","aria-label","value","onChange","target","FormControlLabel","control","Radio","label","setItem","stringify","startIcon","csvLines","forEach","join","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","fullWidth","DialogActions","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","maxSnack","getElementById"],"mappings":"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","file":"static/js/main.ed416799.chunk.js","sourcesContent":["const colorDict = {\n    \"black\" : \"#0C0C0C\",\n    \"blue\" : \"#0037DA\",\n    \"cyan\" : \"#3A96DD\",\n    \"green\" : \"#13A10E\",\n    \"purple\" : \"#881798\",\n    \"red\" : \"#C50F1F\",\n    \"white\" : \"#CCCCCC\",\n    \"yellow\" : \"#C19C00\",\n    \"brightBlack\" : \"#767676\",\n    \"brightBlue\" : \"#3B78FF\",\n    \"brightCyan\" : \"#61D6D6\",\n    \"brightGreen\" : \"#16C60C\",\n    \"brightPurple\" : \"#B4009E\",\n    \"brightRed\" : \"#E74856\"\n};\n\nconst colors = Object.values(colorDict);\n\nexport default colors;","import { Paper, Typography, IconButton, FormControl, FormLabel, RadioGroup, Radio, FormControlLabel, Tooltip, Collapse, Button, TextField, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from \"@mui/material\"\nimport { Fragment, useEffect, useState } from \"react\";\nimport { CustomOverlayMap, Map, Polyline } from \"react-kakao-maps-sdk\";\nimport { useSnackbar } from 'notistack';\nimport ControlCameraIcon from '@mui/icons-material/ControlCamera';\nimport BorderColorIcon from '@mui/icons-material/BorderColor';\nimport CircleIcon from '@mui/icons-material/Circle';\nimport AccountTreeIcon from '@mui/icons-material/AccountTree';\nimport BackupTableIcon from '@mui/icons-material/BackupTable';\nimport SaveIcon from '@mui/icons-material/Save';\nimport colors from \"./getColors\";\nimport './App.css';\n\nfunction App() {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const [mousePosition, setMousePosition] = useState(undefined);\n  const [isEditing, setIsEditing] = useState(false);\n  const [editOpened, setEditOpened] = useState(false);\n  const [editName, setEditName] = useState(\"\");\n  const [handlingPoint, setHandlingPoint] = useState(\"back\");\n  const [paths, setPaths] = useState([]);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n\n  function createPath(name) {\n    return {\n      name: name,\n      points: [],\n      counter: (paths.length === 0 ? 0 : paths.reduce((p1, p2) => (p1.counter < p2.counter ? p2 : p1)).counter+1)\n    }\n  }\n\n  useEffect(() => {\n    const savedPaths = JSON.parse(localStorage.getItem(\"paths\"));\n\n    if (savedPaths === null) {\n      setPaths([createPath(\"이름 없는 경로 1\")]);\n    } else {\n      setPaths(savedPaths);\n    }\n  }, []);\n\n  function handleClick(_target, event) {\n    if (!isEditing) {\n      return;\n    }\n\n    const point = {\n      lat: event.latLng.getLat(),\n      lng: event.latLng.getLng()\n    };\n    const newPaths = [...paths];\n\n    if (handlingPoint === \"back\") {\n      newPaths[selectedIndex].points.push(point);\n    } else {\n      newPaths[selectedIndex].points.unshift(point);\n    }\n    console.log(newPaths)\n    setPaths(newPaths);\n  }\n\n  function handleRightClick(_target, _event) {\n    if (!isEditing || paths[selectedIndex].length === 0) {\n      return;\n    }\n\n    const newPaths = [...paths];\n    if (handlingPoint === \"back\") {\n      newPaths[selectedIndex].points.pop();\n    } else {\n      newPaths[selectedIndex].points.shift();\n    }\n    console.log(newPaths)\n    setPaths(newPaths);\n  }\n\n  function handleMouseMove(_target, event) {\n    setMousePosition({\n      lat: event.latLng.getLat(),\n      lng: event.latLng.getLng()\n    })\n  }\n\n  function roundCoord(coord) {\n    return (Math.round(coord*100) / 100).toFixed(2);\n  }\n\n  function enterMovingMode() {\n    setIsEditing(false);\n  }\n\n  function enterEditingMode() {\n    setIsEditing(true);\n  }\n\n  function handleOptionChange(event) {\n    setHandlingPoint(event.target.value);\n  }\n\n  function getPathClickHandler(index) {\n    return () => {\n      setSelectedIndex(index);\n    };\n  }\n\n  function appendNewPath() {\n    const nameSet = new Set(paths.map(path => path.name));\n    let index = 1;\n    while (nameSet.has(`이름 없는 경로 ${index}`)) {\n      ++index;\n    }\n    setPaths([...paths, createPath(`이름 없는 경로 ${index}`)]);\n\n    enqueueSnackbar(`\"이름 없는 경로 ${index}\"를 추가하였습니다.`, { variant: \"success\" });\n  }\n\n  function openEditNameDialog() {\n    setEditName(paths[selectedIndex].name);\n    setEditOpened(true);\n  }\n\n  function removePath() {\n    if (paths.length === 1) {\n      enqueueSnackbar(\"경로를 삭제할 수 없습니다. 경로는 적어도 한 개 존재해야 합니다.\", { variant: \"error\" });\n    } else {\n      const name = paths[selectedIndex].name;\n      const newPaths = [...paths];\n      newPaths.splice(selectedIndex, 1);\n\n      if (selectedIndex > 0) {\n        setSelectedIndex(selectedIndex-1);\n      }\n\n      setPaths(newPaths);\n      enqueueSnackbar(`경로 \"${name}\"를 제거하였습니다.`, { variant: \"success\" });\n    }\n  }\n\n  function handleTextFieldChange(event) {\n    setEditName(event.target.value);\n  }\n\n  function handleEditDialogClose() {\n    setEditOpened(false);\n  }\n\n  function applyEditDialogAndClose() {\n    const name = paths[selectedIndex].name;\n    const newPaths = [...paths];\n    newPaths[selectedIndex].name = editName;\n    setEditOpened(false);\n    enqueueSnackbar(`\"${name}\"을 \"${editName}\"으로 수정하였습니다.`, { variant: \"success\" });\n  }\n\n  function saveTextData(text, filename) {\n    const element = document.createElement(\"a\");\n    const textFile = new Blob([[text]], {type: \"text/plain\"});\n    element.href = URL.createObjectURL(textFile);\n    element.download = filename;\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  }\n\n  function saveAsJSON() {\n    saveTextData(JSON.stringify(paths), \"paths.json\");\n  }\n\n  function saveAsCSV() {\n    const csvLines = [\"datatype;x;y\"];\n    paths.forEach(path => {\n      path.points.forEach(point => {\n        csvLines.push(`${path.name};${point.lat};${point.lng}`);\n      });\n    });\n    saveTextData(csvLines.join(\"\\n\"), \"paths.csv\");\n  }\n\n  function saveToLocal() {\n    localStorage.setItem(\"paths\", JSON.stringify(paths));\n    enqueueSnackbar(`작업 내역을 브라우저(localStorage)에 저장하였습니다.`, { variant: \"success\" });\n  }\n\n  return (\n    <div className=\"App\">\n      <Map \n        className=\"app-map\"\n        center={{ lat: 37.5642135, lng: 127.0016985 }}\n        level={7}\n        onClick={handleClick}\n        onRightClick={handleRightClick}\n        onMouseMove={handleMouseMove}\n      >\n        {mousePosition !== undefined &&\n          <CustomOverlayMap\n            key=\"mouse-position\"\n            position={mousePosition}\n            zIndex={2}\n          >\n            <div className=\"app-mouse-info\">\n              <Paper className=\"app-mouse-paper\">\n                <Typography variant=\"subtitle2\">\n                  {`위도 ${roundCoord(mousePosition.lat)}, 경도 ${roundCoord(mousePosition.lng)}`}\n                </Typography>\n              </Paper>\n            </div>\n          </CustomOverlayMap>\n        }\n\n        {paths.map(path => (\n          <Fragment>\n            <Polyline\n              path={[path.points]}\n              strokeWeight={3}\n              strokeColor={colors[path.counter % colors.length]}\n              strokeOpacity={1}\n              strokeStyle={\"solid\"}\n            />\n\n            {path.points.map(point => (\n              <CustomOverlayMap\n                position={point}\n                zIndex={1}\n              >\n                <div\n                  className=\"app-map-point\"\n                  style={{ border: `3px solid ${colors[path.counter % colors.length]}` }}\n                />\n              </CustomOverlayMap>\n            ))}\n          </Fragment>\n        ))}\n      </Map>\n\n      <Paper className=\"app-panel\">\n        <div className=\"app-panel-layout\">\n          <Typography variant=\"h5\" className=\"app-panel-title\">\n            경로 목록\n          </Typography>\n\n          <div className=\"app-panel-controls\">\n            <Button onClick={appendNewPath}>새 경로 추가</Button>\n            <Button onClick={openEditNameDialog}>이름 수정</Button>\n            <Button onClick={removePath}>경로 삭제</Button>\n          </div>\n\n          <div className=\"app-panel-button-container\">\n            {paths.map((path, index) => (\n              <Button \n                className=\"app-panel-button\"\n                onClick={getPathClickHandler(index)}\n                style={{\n                  backgroundColor: (index === selectedIndex ? \"silver\" : \"transparent\"),\n                  color: colors[path.counter % colors.length]\n                }}\n              >\n                <CircleIcon></CircleIcon>\n                <Typography className=\"app-panel-button-text\">{path.name}</Typography>\n              </Button>\n            ))}\n          </div>\n        </div>\n      </Paper>\n\n      <Paper className=\"app-toolbar\">\n        <div className=\"app-toolbar-layout\">\n          <div className=\"app-toolbar-modes\">\n            <Tooltip title=\"지도 이동\">\n              <IconButton onClick={enterMovingMode}>\n                <ControlCameraIcon color={isEditing ? \"default\" : \"primary\"}></ControlCameraIcon>\n              </IconButton>\n            </Tooltip>\n\n            <Tooltip title=\"위치 추가\">\n              <IconButton onClick={enterEditingMode}>\n                <BorderColorIcon color={isEditing ? \"primary\" : \"default\"}></BorderColorIcon>\n              </IconButton>\n            </Tooltip>\n          </div>\n\n          <Collapse in={isEditing}>\n            <div className=\"app-toolbar-options\">\n              <FormControl component=\"fieldset\">\n                <FormLabel component=\"legend\">수정할 위치</FormLabel>\n                <RadioGroup \n                  row aria-label=\"gender\"\n                  name=\"row-radio-buttons-group\"\n                  value={handlingPoint}\n                  onChange={handleOptionChange}\n                >\n                  <FormControlLabel value=\"front\" control={<Radio />} label=\"앞\" />\n                  <FormControlLabel value=\"back\" control={<Radio />} label=\"뒤\" />\n                </RadioGroup>\n              </FormControl>\n\n              <Typography variant=\"caption\">\n                왼쪽 클릭: 지점 추가\n              </Typography>\n\n              <Typography variant=\"caption\">\n                오른쪽 클릭: 지점 제거\n              </Typography>\n            </div>\n          </Collapse>\n        </div>\n      </Paper>\n\n      <Paper className=\"app-save\">\n        <div className=\"app-save-layout\">\n          <Button color=\"secondary\" onClick={saveToLocal} startIcon={<SaveIcon></SaveIcon>}>\n            <Typography variant=\"subtitle1\">작업 내역 저장</Typography>\n          </Button>\n          <Button onClick={saveAsJSON} startIcon={<AccountTreeIcon></AccountTreeIcon>}>\n            <Typography variant=\"subtitle1\">JSON으로 다운로드</Typography>\n          </Button>\n          <Button onClick={saveAsCSV} startIcon={<BackupTableIcon></BackupTableIcon>}>\n            <Typography variant=\"subtitle1\">CSV로 다운로드</Typography>\n          </Button>\n        </div>\n      </Paper>\n\n      <Dialog open={editOpened} onClose={handleEditDialogClose}>\n        <DialogTitle>경로 이름 수정</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            경로 이름을 설정해주세요.\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            label=\"새 경로 이름\"\n            fullWidth\n            variant=\"standard\"\n            value={editName}\n            onChange={handleTextFieldChange}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleEditDialogClose}>취소</Button>\n          <Button onClick={applyEditDialogAndClose}>확인</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SnackbarProvider } from 'notistack';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SnackbarProvider maxSnack={3}>\n      <App />\n    </SnackbarProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}